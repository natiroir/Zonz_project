#include <SDL2/SDL.h>
#include <SDL2/SDL_opengl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>  // Nécessaire pour dlopen et dlsym

#include "actions.h"
#include "param.h"
#include "splash.h"
#include "world.h"

void main_loop()
{
    // int is_game_finish = 0;   vous pouvez l'utilisez
    uint32_t nb = 0;
    void *handle;
    char (*get_action)();
    char action_result;
    char *error;
    while (!quitting)
    {
        SDL_Event event;

        while (SDL_PollEvent(&event))
        {
            if (event.type == SDL_QUIT)
            {
                quitting = 1;
            }
        }

        // Ouvrir la bibliothèque partagée
        handle = dlopen("players/players1.so", RTLD_LAZY);
        if (!handle) {
            fprintf(stderr, "Erreur dlopen : %s\n", dlerror());
            exit(EXIT_FAILURE);
        }

        // Réinitialiser les erreurs avant d'utiliser dlsym
        dlerror();

        // Récupérer la fonction get_action_1
        get_action = (char (*)()) dlsym(handle, "get_action_1");
        if ((error = dlerror()) != NULL) {
            fprintf(stderr, "Erreur dlsym : %s\n", error);
            dlclose(handle);  // Fermer la bibliothèque avant de quitter
            exit(EXIT_FAILURE);
        }

        // Appeler la fonction et récupérer la valeur de retour
        action_result = get_action();
        printf("Action récupérée : %c\n", action_result); // Debugging

        // Appliquer l'action récupérée à players[0] (si nécessaire)
        actions_do(players[0], action_result); 

        // Autres actions
        if (nb % 2 == 0) {
            actions_do(players[1], 14); // bombe vert 
        } else {
            actions_do(players[1], 6);  // right vert 
        }
        actions_do(players[2],4); //down bleu 
        actions_do(players[3],13); //right violet

		// Affichage et mise à jour
        render_map();
        nb++;

        // Fermer la bibliothèque après utilisation
        dlclose(handle);

        SDL_Delay(100);
    }
}
