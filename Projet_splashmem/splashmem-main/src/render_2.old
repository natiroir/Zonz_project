#include <SDL2/SDL.h>
#include <SDL2/SDL_opengl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>  // Nécessaire pour dlopen et dlsym

#include "actions.h"
#include "param.h"
#include "splash.h"
#include "world.h"

// Déclaration des pointeurs de fonction
char (*get_action1)();
char (*get_action2)();
char (*get_action3)();
char (*get_action4)();

void* handle1 = NULL;
void* handle2 = NULL;
void* handle3 = NULL;
void* handle4 = NULL;

void load_libraries();
void close_libraries();  // Ajout de cette fonction

/* ------------------------------------------------------------------------- */
/*                                                                           */
/* ------------------------------------------------------------------------- */
void render_map()
{
    int      i = 0;
    SDL_Rect rect;

    rect.x = 0;
    rect.y = 0;
    rect.w = SQUARE_SIZE;
    rect.h = SQUARE_SIZE;

    screenSurface = SDL_GetWindowSurface(window);

    for (i = 0; i < SPOT_NUM; i++)
    {
        rect.x = (i % MAP_SIZE) * SQUARE_SIZE;
        rect.y = (i / MAP_SIZE) * SQUARE_SIZE;
        SDL_FillRect(screenSurface, &rect, colors[mapmem[i]]);
    }
    SDL_UpdateWindowSurface(window);
}

/* ------------------------------------------------------------------------- */
/*                                                                           */
/* ------------------------------------------------------------------------- */
void render_player()
{
    int i         = 0;
    screenSurface = SDL_GetWindowSurface(window);
    SDL_Rect rect;

    rect.x = 0;
    rect.y = 0;
    rect.w = SQUARE_SIZE;
    rect.h = SQUARE_SIZE;

    for (i = 0; i < MAX_PLAYERS; i++)
    {
        rect.x = players[i]->x * SQUARE_SIZE;
        rect.y = players[i]->y * SQUARE_SIZE;
        SDL_FillRect(screenSurface, &rect, colors[i] - 0x00202020);
    }
    SDL_UpdateWindowSurface(window);
}

/* ------------------------------------------------------------------------- */
/*                                                                           */
/* ------------------------------------------------------------------------- */
void main_loop()
{
    // int is_game_finish = 0;   vous pouvez l'utilisez
    uint32_t nb = 0;
    char action_result_1;
    char action_result_2;
    char action_result_3;
    char action_result_4;
    //char *error;
    //const char *chemin_lib[4] = {"players/player1.so","players/player2.so","players/player3.so","players/player4.so"};
    //const char *nom_f_action[4] = {"get_action_1","get_action_2","get_action_3","get_action_4"};

    load_libraries();
    while (!quitting)
    {
        SDL_Event event;

        while (SDL_PollEvent(&event))
        {
            if (event.type == SDL_QUIT)
            {
                quitting = 1;
            }
        }
              
        // Appeler la fonction et récupérer la valeur de retour
        action_result_1 = get_action1();
        //printf("Action récupérée : %d\n", action_result); // Debugging
        actions_do(players[0], action_result_1); 
        action_result_2 = get_action2();
        actions_do(players[1], action_result_2); // bombe vert 
        action_result_3 = get_action3();
        actions_do(players[2], action_result_3); // bleu         
        action_result_4 = get_action4();
        actions_do(players[3], action_result_4); // violet
        // Affichage et mise à jour
        render_map();
        nb++;

        SDL_Delay(100);   
    }
    
    // Fermer la bibliothèque après utilisation
	close_libraries();
}

void load_libraries() 
{
    char *error;

    handle1 = dlopen("players/player1.so", RTLD_LAZY);
    handle2 = dlopen("players/player2.so", RTLD_LAZY);
    handle3 = dlopen("players/player3.so", RTLD_LAZY);
    handle4 = dlopen("players/player4.so", RTLD_LAZY);
    if (!handle1 || !handle2 || !handle3 || !handle4) {
        fprintf(stderr, "Erreur lors du chargement des bibliothèques : %s\n", dlerror());
        close_libraries();
        exit(EXIT_FAILURE);
    }

    // Récupération des fonctions
    get_action1 = (char (*)()) dlsym(handle1, "get_action_1");
    if ((error = dlerror()) != NULL) {
        fprintf(stderr, "Erreur dlsym (get_action_1) : %s\n", error);
        exit(EXIT_FAILURE);
    }

    
    // Réinitialiser les erreurs avant d'utiliser dlsym
    dlerror();
    // Récupérer les symboles des fonctions
    //get_action1 = (char (*)())dlsym(handle1, "get_action_1");
    get_action2 = (char (*)())dlsym(handle2, "get_action_2");
    get_action3 = (char (*)())dlsym(handle3, "get_action_3");
    get_action4 = (char (*)())dlsym(handle4, "get_action_4");

    if (!get_action1 || !get_action2) {
        fprintf(stderr, "%s\n", dlerror());
        exit(EXIT_FAILURE);
    }
}

// Fonction pour fermer les bibliothèques
void close_libraries() {
    if (handle1) dlclose(handle1);
    if (handle2) dlclose(handle2);
    if (handle3) dlclose(handle3);
    if (handle4) dlclose(handle4);
}
